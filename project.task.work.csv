"id","task_id/id","work_summary_type_id/id","name","hours","date","create_date","write_date","user_id/id"
"__export__.project_task_work_542409","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Debug the _get_domain_locations(), _get_domain_locations_new(), _compute_quantities_dict() and _compute_quantities() methods, here we have another  _compute_quantities and _compute_quantities_dict method with different decorator or parameter so, here method overloading is performed. _get_domain_location method get all stock locations from passed context location, warehouse or if not passed then it will get stock locations from all the warehouses, then it calls the _get_domain_location_new method and passes location_ids as parameter now this method get child location of any location present in locations_ids and creates domain for quant_location, move_in_location and move_out_locations, Now _compute_quantities_dict method gets the incoming_qty and outgoing_qty from incoming moves and outgoing moves and it does also gets the onhand quantity and reserved quantities from stock.quant and then calculates free_qty = onhand - reserved and virtual_qty = onhand + incoming - outgoing. that is how we get the value of available_qty, free_qty, virtual_available, incoming_qty and outgoing_qty fields of product.product model.","6.0","2022-03-03 13:13:54","2022-03-03 13:28:41","2022-03-03 13:28:41","__export__.res_users_604"
"__export__.project_task_work_542334","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Observed the values of qty_available, incoming_qty, outgoing_qty, free_qty, virtual_qty fields of product.product model in product.py file of stock module.","1.0","2022-03-03 13:11:12","2022-03-03 13:13:51","2022-03-03 13:13:51","__export__.res_users_604"
"__export__.project_task_work_542331","__export__.project_task_72267","__export__.project_task_work_summary_type_27","I have learned about read_group() method in odoo. It groups and create domain based on a field.","1.0","2022-03-03 13:09:21","2022-03-03 13:11:09","2022-03-03 13:11:09","__export__.res_users_604"
"__export__.project_task_work_541993","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Found that In _assign_picking method of stock.move model new picking is created if move with following domain condition is not found: [             ('group_id', '=', self.group_id.id),             ('location_id', '=', self.location_id.id),             ('location_dest_id', '=', self.location_dest_id.id),             ('picking_type_id', '=', self.picking_type_id.id),             ('printed', '=', False),             ('immediate_transfer', '=', False),             ('state', 'in', ['draft', 'confirmed', 'waiting', 'partially_available', 'assigned'])] other wise we just write existing picking id to stock.move field 'picking_id'.","4.0","2022-03-02 13:45:20","2022-03-02 13:48:24","2022-03-02 13:48:24","__export__.res_users_604"
"__export__.project_task_work_541990","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Debugging methods that called when we confirm sale quotation: action_confirm(), _action_confirm(), /sale_stock/model/sale_order.py SaleOrderLine def _action_launch_stock_rule(), run(procurements, raise_user_error=True), _run_pull(procurements) and _assign_picking, _action_confirm of stock.move","1.0","2022-03-02 13:37:25","2022-03-02 13:45:17","2022-03-02 13:45:17","__export__.res_users_604"
"__export__.project_task_work_541988","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Debug of _run_pull() of stock.rule model: def _run_pull(procurements): 	move_values_by_company = defaultdict(list) 	mtso_products_by_locations = defaultdict(list)  	for procurement, rule in procurments: 		if not rule.location_src_id: 			raise Error  		if rule.procurement_method == ""mts_else_mto"": 			mtso_products_by_locations[rule.location_src_id].append(procurement.product_id.id) 	 	forcasted_qties_by_loc = {}  	for location, product_ids in mtso_products_by_locations.items(): 		products = browse(product_ids) 		forcasted_qties_by_loc[location] = { product_id: product.free_qty for product in products }  	for procurement, rule in procurements: 		procure_method = rule.procurement_method 		if rule.procurement_method == 'mts_else_mto' 			 			qty_needed = convert procurement.product_qty unit into product unit 			 			if qty_needed <= 0: 				forcasted_qties_by_loc[rule.location_src_id][procurement.product_id.id] -= qty_needed 				procure_method = ""make_to_order"" 			elif qty_needed > forcasted_qties_by_loc[rule.location_src_id][procurement.product_id.id]: 				procure_method = ""make_to_order"" 			else: 				forcasted_qties_by_loc[rule.location_src_id][procurement.product_id.id] -= qty_needed 		 		move_value = prepare stock move values from procurement values 		move_value['procure_method'] = procure_method 		move_values_by_company[procurement.company_id.id].append(move_values)  	for company_id, move_values in move_values_by_company.items(): 		move = with_context company_id create(move_values) 		move._action_confirm() 	 	return True","3.0","2022-03-02 13:35:57","2022-03-02 13:37:20","2022-03-02 13:37:20","__export__.res_users_604"
"__export__.project_task_work_541713","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Debug that how invoice status is change based on untaxed_amount_to_invoice field: def _compute_untaxed_amount_to_invoice()  	for line in self whose state in (sale, done) 	 		uom_qty_to_consider = qty_delivered if invoice_policy == delivery else product_uom_qty 		  		price_reduce = deduct descounted price from the price_unit  		subtotal = price_reduce * uom_qty_to_consider 		 		if found line with tax included: 			calculate subtotal without tax using compute_all() 		 		inv_lines = _get_invoice_lines()  		if found invoicing with different discount: 			we try to calculate mannually remaining amount to invoice  		else: 			amount_to_invoice = price_subtotal - line.untaxed_amount_invoiced  		line.untaxed_amount_to_invoice = amount_to_invoice   def _compute_untaxed_amount_invoiced()  	for line in self: 		amount_invoiced = 0 		for invoice_line in invoice_ids: 			if invoice_line.move_id.state = ""posted"" 				if invoice_line.move_id.move_type == ""out_inovice"": 					amount_invoiced += invoice_line.price_subtotal  				elif invoice_line.move_id.move_type == ""out_refund"": 					amount_invoiced -= inovice_line.price_subtotal  		line.untaxed_amount_invoiced = amount_innvoiced","3.0","2022-03-01 13:52:53","2022-03-01 13:54:21","2022-03-01 13:54:21","__export__.res_users_604"
"__export__.project_task_work_541712","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Found that _assign_picking() from _action_confirm() method of stock.move is called from _run_pull() method of stock.rule model but again _run_pull method is called from run() method of procurement.group model. Found that there is a stock rule in stock location route and stock location route is defined in stock warehouse and also can be defined in product, product category and sale order line.","1.0","2022-03-01 13:49:56","2022-03-01 13:52:51","2022-03-01 13:57:22","__export__.res_users_604"
"__export__.project_task_work_541711","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Debug the run() method of Procurement Group Class in stock/models/stock_rule.py file: >> def run(procurements, raise_user_error=True): 	def raise_exception(procurement_errors): 		. .. 	 	action_to_run = defaultdict(list) 	 	for procurement in procurements: 		 		skip iteration if product_type is not consume or product or product_qty == 0 		 		rule = find rule(s) from route_ids of sale_order_line or product_template or product_category. If not found then find the rule 							from route of warehouse.route_ids  		if rule not found:  raise error 		 		else: 			action = ""pull"" if rule.action == ""pull_push"" else rule.action 			action_to_run[action].append((procurement, rule))  	for action, procurements in action_to_run.items(): 		 		if found method ""_run_%s"" %action in stock.rule model: 			call ""_run_%s"" %action(procurements)  		else raise _logger.error  	return True","4.0","2022-03-01 13:48:41","2022-03-01 13:49:52","2022-03-01 13:49:52","__export__.res_users_604"
"__export__.project_task_work_541291","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Analysed and debug the _compute_untaxed_amount_to_invoice() and _compute_untaxed_amount_invoiced() method that calculates invoice and remaining amount to be invoice in sale order line model.","1.0","2022-02-28 13:42:37","2022-02-28 13:46:22","2022-02-28 13:46:22","__export__.res_users_604"
"__export__.project_task_work_541290","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Requirement 27: analyse the order line and fond the field for the product free_qty_today, qty_available_today and virtual_available_at_date, similarly got the field like free_qty, virtual_available and qty_available fields in product.product model. >> Get all available product variants whose virtual_available quantity is grater then 1 and created order line for those products","2.0","2022-02-28 13:36:04","2022-02-28 13:42:33","2022-02-28 13:42:33","__export__.res_users_604"
"__export__.project_task_work_541288","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Requirement 26: added cost_price, margin and margin percentage field in sale order line. 1) get cost price value from standard price field of the product model. calculated the margin and margin percentage using compute method and considered the scenarios for a) Profit 2) Loss 3) Refund or Deposit amount order line. 2) added total margin and total margin percentage total margin percentage. considered the scenarios similar to the sale order line for calculating total margin percentage. here only cost_price is store True Field. added all these fields in the appropriate view. >> Requirement 26: Initially completed and gives desired output.","5.0","2022-02-28 13:25:20","2022-02-28 13:36:00","2022-02-28 13:36:00","__export__.res_users_604"
"__export__.project_task_work_540982","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Requirement 26: Created the field in sale order line for profit margin and profit margin percentage. created a related field for cost_price in sale_order line. calculated the profit and profit percentage using a compute method, so, here profit margin and profit margin percentage is store false field. Put the conditions to check for profit or loss and checked if there is any refunds are there.","2.5","2022-02-26 07:53:51","2022-02-26 07:57:56","2022-02-26 07:57:56","__export__.res_users_604"
"__export__.project_task_work_540869","__export__.project_task_73944","__export__.project_task_work_summary_type_149","Meeting: Training - Group Discussion","1.5","2022-02-26 06:00:00","2022-02-26 06:14:59","2022-02-26 06:14:59","__export__.res_users_604"
"__export__.project_task_work_540715","__export__.project_task_72267","__export__.project_task_work_summary_type_30","    1) Debug Invoice Status Method:     2)      3) ""no"" if state not in sale or done     4) ""invoiced"" if untaxed_amount_to_invoice ==0 and is_downpayment == True     5) ""to invoice"" if qty_to_invoice == 0     6) ""upselling"" if qty_delivered > demand and state == sale     7) ""invoiced"" if qty_invoiced >= demand     8) else : ""no""     9)      10) There are 2 buttons of name ""Create Inovoice"" calling same method:     11) 1st is visible in invoice_status : ""to invoice"" or ""no"" and order state: ""sale""     12)      13) 2nd is visible in invoice_status: ""no"" or order state: ""sale""     14) with context: default_advance_payment_method: ""percentage""     15)      16)      17) Debug create_invoices() method:     18) get sale_order ids from parent view     19)      20) call _create_invoices() if advance_downpayment_method == ""delivered""     21)      22) else:     23)      24) create product for downpayment if not created     25)      26) for order in sales_orders:     27) 	amount = set in % or fixed value     28) 	name = set value     29) 	     30) 	raise UserError if invoice policy is not ""order""     31) 	raise UserError if product type is not ""service""     32) 	     33) 	get taxes from downpayment product and add fiscal position tax if applicable     34) 	     35) 	for line in orderlines:     36) 		get analytical_tag_ids and make list of (4,vals,None) triplets     37)      38) 	prepare values for sale order lines     39) 	create sale order lines for downpayment     40) 	call self._create_invoice(order, so_line, amount)     41)      42) if context open_invoice is set:     43) 	call and return value from action_view_invoice()     44) 	     45) return {'type': 'ir.actions.act_window_close'}     46)      47)      48) def _create_invoice(order, so_line, amount):     49) 	raise UserError if     50) 		payment method = 'percentage' and amount <=0 OR payment method 'fixed' and amount<=0     51) 	     52) 	amount = set % or fixed value     53) 	name = set name     54) 	     55) 	prepare invoice values     56) 		_prepare_invoice_values(order, name, amount, so_line)     57) 	     58) 	add order.fiscal_position_id in prepared dictionary     59) 	     60) 	invoice = create(prepared dictionary)     61) 	return invoice","8.0","2022-02-25 13:57:29","2022-02-25 13:57:36","2022-02-25 13:58:09","__export__.res_users_604"
"__export__.project_task_work_540284","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Learned about invoice policy and invoice status. Invoice policy: Delivery: Invoice is created only for product which are delivered. Invoice Policy: Order: Invoice is create for the sale order and all products included in sale order line.","1.0","2022-02-24 13:42:36","2022-02-24 13:44:08","2022-02-24 13:44:08","__export__.res_users_604"
"__export__.project_task_work_540268","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Learned about Account Journal and accounting module in odoo. Learned about debit and credit operations in odoo. 2) There is a account.journal model for journal in odoo 3) There is a account.move and account.move.line model for journal and journal items. 4) Learned how debit and credit operations are performed at time for creating invoice for customer or for creating bill for vendor.","5.0","2022-02-24 13:27:40","2022-02-24 13:32:46","2022-02-24 13:32:46","__export__.res_users_604"
"__export__.project_task_work_540256","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Learned how to fire SQL queries in Odoo. Learned about aliases and subquery in SQL. Learned how we can use dictfetchall() and detchall() method to get the result of query.","2.0","2022-02-24 13:25:29","2022-02-24 13:27:35","2022-02-24 13:27:35","__export__.res_users_604"
"__export__.project_task_work_539958","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Requirement 19 and 20: Initially completed and gives desired output. Reanalysed the button_validate method and it's associated methods that is called for validating the delivery order.","1.0","2022-02-23 14:01:09","2022-02-23 14:02:58","2022-02-23 14:02:58","__export__.res_users_604"
"__export__.project_task_work_539957","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Learned and analysed about the search attribute. learned the how we can search store false field in odoo using search attribute. 2) Learned to Execute query in odoo using self.env.cr.execute() method or self._cr.execute() method, and I have learned that how we can get the result of executed query using fetchall() or dictfetchall() method. Here fetchall() method returns list of tuple whereas dictfetchall() method returns list of dictionaries.","4.0","2022-02-23 13:56:38","2022-02-23 14:01:03","2022-02-23 14:01:03","__export__.res_users_604"
"__export__.project_task_work_539955","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Analysed and find out the relation between sale order and stock picking: There is a One2many field in sale order for stock picking, and many2one related field for sale order in stock picking. Here Many2one field is related with group_id which is related with move_lines.group_id. We create a group and set the group_id of move_lines when we confirm the sale order.","3.0","2022-02-23 13:53:41","2022-02-23 13:56:31","2022-02-23 13:56:31","__export__.res_users_604"
"__export__.project_task_work_539625","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Analysed and created simplified algorithm for button validate method, which is still pending:     1) stock/models/stock_picking.py     2)      3) def button_validate(self)     4) 	Raise User Error if 	     5) 		found picking(s) without any move     6) 		found picking(s) without any reserved or done qtys in all moves     7) 		found picking(s) without lots     8) 	     9) 	set context button_validate_picking_ids=self.ids if not set already     10)      11) 	res = def _pre_action_done_hook()     12) 		if skip_immediate context is not set:     13) 			if found picking(s) where done qty = 0 for all moves:     14) 				return wizard of immediate transfer     15) 		     16) 		if skip_backorder context not set:     17) 			if found picking(s) where qty_done < demand for any stock move:     18) 				return wizard to generate or not backorder     19) 		return True     20) 	     21) 	if and only if res does not returns True:     22) 		return res","6.0","2022-02-22 13:41:03","2022-02-22 13:42:55","2022-02-22 13:42:55","__export__.res_users_604"
"__export__.project_task_work_539623","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Debug and Analysed button_validate() method of stock picking, and then process method of stock immediate transfer, I have debug and analysed the _set_quantities_to_reservation() method of stock moves.","2.0","2022-02-22 13:38:30","2022-02-22 13:40:53","2022-02-22 13:40:53","__export__.res_users_604"
"__export__.project_task_work_539306","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Further Analysed what happens when confirm button on sale order screen is pressed: I have listed down the steps and analysed the algorithm: Steps : >>    1) Exit and Raise Exception if order state is done or canceled     2)      3) set order state to: sale     4) set order date to: now     5)      6) for line in order_line:     7)      8) 	skip if product is not for sale or product type is consumer or service     9)      10) 	qty = count total quantity of the product from incoming and outgoing moves     11)      12) 	skip if qty and line.product_uom_qty are equal     13)      14) 	get procurement group or create if it does not exists     15)      16) 	add partner_id and and move_type to procurement group     17)      18) 	values = prepare procurement values     19)      20) 	product_qty = line.product_uom_qty - qty     21)      22) 	get uom of order line     23) 	get uom of product     24)      25) 	adjust qty if order line uom and product uom is not same     26)      27) 	add following values to Procurement namedtuple      28) 		product_id,      29) 		product_qty,     30) 		procurement_uom,     31) 		location_id,     32) 		line name,     33) 		order name,     34) 		company_id     35) 		values     36) 	     37) if Procurements:     38) 	procurement.run(procurements)     39)      40) orders = self.mapped('order_id')     41) for order in orders:     42) 	picking_to_confirm = filter pickings whose state is not cancelled or done     43) 	if pickings_to_confirm: pickings_to_confirm.action_confirm()     44) return True","8.0","2022-02-21 13:20:21","2022-02-21 13:26:36","2022-02-21 13:26:36","__export__.res_users_604"
"__export__.project_task_work_539082","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Analysed action_confirm(), _action_confirm() of sale order model, _action_launch_stock_rule(), _get_qty_procurement(), _get_procurement_group() method of sale order line model, and found that there is a method to verify that there is only single value in the list other wise it raises exception of singleton value. I have Learned about namedtuple() method of collection module, I have Learned about Thread class of threading module in python. I have leaned how we can use syntax like {1, 2,} & {1}.","4.0","2022-02-19 07:34:50","2022-02-19 07:42:24","2022-02-19 07:42:24","__export__.res_users_604"
"__export__.project_task_work_538781","__export__.project_task_72267","__export__.project_task_work_summary_type_30","Requirement 18./ create a tree view of sale order line added a button named reserved order lines in button box of form view of sale order. Logic: 1) get the sale order line of product in order_line of current sale order, 2) exclude the current order order_lines 3) filtered order line whose stock move is reserved. >Requirement 18: Initially completed and gives desired output.","0.5","2022-02-18 13:11:28","2022-02-18 13:19:42","2022-02-18 13:19:42","__export__.res_users_604"
"__export__.project_task_work_538756","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Analysed the relationship between sale order line and stock move model: There is a one2many for stock move in sale order line, Stock Picking - Stock Move or Stock Move Line: One2many field for stock move and another One2many field for stock move line in stock picking. > Stock Move - Stock Move Line: There is a One2many field for stock move line in stock move and there is a Many2one field for stock move in stock move line. > Sale Order - Stock Picking: There is a One2many field for stock picking in sale order and there is a Many2one field for sale order in stock picking.","1.5","2022-02-18 12:58:12","2022-02-18 13:10:38","2022-02-18 13:11:22","__export__.res_users_604"
"__export__.project_task_work_538735","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Analysed and debug price_unit field of sale order line and how extra price and price list formula or discount is added to the price_unit field of the sale_order_line, >> What I have observed that there is a onchange method named product_uom_change in sale order line mode and that method pass some values in context and than calls another method of sale order line named _get_display_price that method find if there is any extra price set on the particular variant and than calls another method of pricelist model named get_product_price_rule this method calls _compute_price_rule method of pricelist model and this method calls price_compute method of product model if there is no pricelist or calls _compute_price method of the pricelist model if it founds a price list","4.0","2022-02-18 12:42:23","2022-02-18 12:57:27","2022-02-18 13:11:22","__export__.res_users_604"
"__export__.project_task_work_538730","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Analysised various test cases and checked stock.quant model table in Database  I have purchased the 70 Bag Packs and placed 25 in stock location (id: 8), 25 in Shelf 1 (28) and another 20 in Shelf 2 (27). I have created a Sale Order of Back Pack for 30 quantities: It took 25 from stock location(8) and another 5 qty from Shelf 1(28). Than I have created another Sale Order of 30 Bag Packs: It took 20 from Shelf 1 (28) and remaining 10 from Shelf 2 (27) and than when I have unreserved the first Sale Order It deduct the 25 from Stock Location (8) and another 5 from Shelf 1 (28)","2.0","2022-02-18 12:41:35","2022-02-18 12:42:15","2022-02-18 12:42:15","__export__.res_users_604"
"__export__.project_task_work_538472","__export__.project_task_72267","__export__.project_task_work_summary_type_27","Analyse and found the relation between stock.move, stock.move.line, sale.order.line that is defined in stock and sale_stock module. Here sale_stock module has models and fields to join sale and stock module's models","1.0","2022-02-17 13:27:45","2022-02-17 13:31:44","2022-02-17 13:31:44","__export__.res_users_604"
"__export__.project_task_work_538448","__export__.project_task_72267","__export__.project_task_work_summary_type_30","49./ Watched the all 3 videos on price list: Price List is for getting the price of product based on customer: For example there are B2B customer which buys products in bulk quantity there for there is a different cheaper price or discount of the same product is reserved for them. We can make price list from product.priselist and product.pricelist.item model, in product pricelist.item model we can specify the product or product variant. fixed price or discount or based on calculated formula that depends on another price list or price of that sale price or cost price of that product, we can specify the price list for a customer and than when we make a sale order for that customer price of the product is shown according to the price list which is specified for that customer, we can also specify extra price for a particular value of an attribute, product template price + extra price is now the price of that product variant and all calculation of price list is computed on this price with extra cost. model to configure extra price is product.template.attribute.value.","2.5","2022-02-17 13:15:53","2022-02-17 13:27:31","2022-02-17 13:32:23","__export__.res_users_604"
"__export__.project_task_work_538399","__export__.project_task_72267","__export__.project_task_work_summary_type_30","48./ watched the video of fiscal position: with applies tax based destination location, we can also automate the tax application base of country, country group, state, and range of zipcode, or we can use tax cloud api to find the tax.","0.5","2022-02-17 13:13:19","2022-02-17 13:15:49","2022-02-17 13:15:49","__export__.res_users_604"
"__export__.project_task_work_538393","__export__.project_task_72267","__export__.project_task_work_summary_type_30","47./ Debug and find the values of self.env.company, self.env.user and self.env.uid, 2) company_id is derived from self.env.company.id and salesperson user_id is derived from self.env.user, warehouse_id is derived from first warehouse of the company_id. 3) created the product ""Window"" with 6 varients, created the purchase order of window with 700 quantities, divided the incoming shipment in location stock, shelf 1, and shelf 2. > created sale order of 300 window, found that in delivery order it is getting 250 window from location stock and remaining 50 windows from shelf 1, this information is stored in stock.move.line including reserved quantities field, while stock.move have compute store false field to show reserved quantities, done quantities and demand.","3.0","2022-02-17 13:03:18","2022-02-17 13:13:14","2022-02-17 13:13:14","__export__.res_users_604"
"__export__.project_task_work_538375","__export__.project_task_72267","__export__.project_task_work_summary_type_30","46./ Meeting with project manager: Understood the flow of product, product variants, purchase order, stock picking, stock move and stock move line, and reserved quantities, as well as sale quotation, sale order, stock.quant model etc.. >> Given task to find self,env.company, self.env.user, and self.env.uid, , > Task to understand and debug the flow of product - purchase order to incoming shipment and sale order to delivery order, debug and find how company_id and warehouse_id is derived.","1.0","2022-02-17 12:51:59","2022-02-17 13:03:13","2022-02-17 13:03:13","__export__.res_users_604"
"__export__.project_task_work_538149","__export__.project_task_72267","__export__.project_task_work_summary_type_30","45./ Requirement 17: 1) Created a button to Manage Deposit 2) on clicking that button we iterate through order lines and check for deposit product id field value 2) If value in deposit product id found then search if there is an order line of deposit product already created for current order line product if yes then update the quantity and price else create a new order line for deposit product of current order line product. >>Requirement 17: Completed and gives desired output","2.0","2022-02-16 13:44:53","2022-02-16 13:47:59","2022-02-16 13:49:20","__export__.res_users_604"
"__export__.project_task_work_538148","__export__.project_task_72267","__export__.project_task_work_summary_type_27","44./ Requirement 17: Analysed and understood the requirement, understood the problem definition, >> There are some product for which it is required to take deposit amount, In an Order if one or more then one order line products has specified to take deposit amount then product of the deposit amount for related order line should be created automatically and that has to be associated with particular order line.","3.0","2022-02-16 13:38:20","2022-02-16 13:44:45","2022-02-16 13:44:45","__export__.res_users_604"
"__export__.project_task_work_538147","__export__.project_task_72267","__export__.project_task_work_summary_type_30","43./ Requirment 16: 1) Created a new product record in product.product model using xml 2) Override the action_confirm method of sale.order model. 3) got the browse object of record created in xml file using ref() method. 4) get the browse object of product using new method and fired onchange method which gets the additional fields values 4) Created the record of order_line with order_id of current sale order. >>Requirement 16 Completed and gives desired output.","3.0","2022-02-16 13:29:03","2022-02-16 13:38:14","2022-02-16 13:38:14","__export__.res_users_604"
"__export__.project_task_work_537775","__export__.project_task_72267","__export__.project_task_work_summary_type_30","42./ Watched the functional videos on Customer, Product and Sale Order, 1) Customer: Records of customer, vendor and employees also are created in res.partner model, record of partner will gets created automatically when we creates a user but it does not creates a record of user when we create a record of partner. 2) Product: There are mainly 2 models for managing product: 1st is product.template in which common or shared properties and characteristics are defined, 2nd is product.product which stores actual product, we may have all the variants of the product in this model. and we have another model product.attribute for storing different attributes from which we can create the different variants of the product. 3) Sale Order: first we create a sale order in draft state which is known as quotation and it is called the order when we change it's state to confirm. here delivery order is generated we can specify the number of reserved quantities from different location in the warehouse. and we can partially deliver the quantities, this will generate a new back order with with demand of remaining quantities. Here we have an option to generate invoice base on order or based on delivery.","5.0","2022-02-15 13:26:14","2022-02-15 13:39:50","2022-02-15 13:39:50","__export__.res_users_604"
"__export__.project_task_work_537752","__export__.project_task_72267","__export__.project_task_work_summary_type_149","Fill up the HR Training Evaluation Form - Personality Development: In which I have described about my Ikigai, Johari window quadrant and what I have learned during this session.","1.16666666667","2022-02-15 13:21:55","2022-02-15 13:26:03","2022-02-15 13:26:03","__export__.res_users_604"
"__export__.project_task_work_537743","__export__.project_task_72267","__export__.project_task_work_summary_type_30","41./ Requirement 15: added functionality to add a new tag (crm_tag) created using xml in tag_ids many2many field of sale order on generating sale quotation from a lead.","2.0","2022-02-15 13:18:35","2022-02-15 13:21:49","2022-02-15 13:21:49","__export__.res_users_604"
"__export__.project_task_work_537448","__export__.project_task_72267","__export__.project_task_work_summary_type_30","40./ Learned about Inheritance in Odoo: There are 3 types of inheritance in odoo: 1) Class Inheritance 2) Prototype Inheritance 3) Delegation Inheritance: 1) Class Inheritance adds a functionality to the existing model, new class compatible with existing views and stored in same table 2) Prototype Inheritance is used to copy features of another model, new class is not compatible with existing views and stored in different tables 3) Delegation Inheritance: Multiple Inheritance is possible, New class is ignored by existing views, stored in different tables, new instance contains an embedded object1 instance with synchronised values. -> Learned how we can use inherit_id to inherit existing views of a model and different value of position attribute (before, after, replace, inside, attributes), I have learned the use of xpath element: Used when we have to access an element from an hierarchy.","8.0","2022-02-14 13:10:29","2022-02-14 13:22:13","2022-02-14 13:22:13","__export__.res_users_604"
"__export__.project_task_work_537148","__export__.project_task_72267","__export__.project_task_work_summary_type_30","39./ Found a bug in validate method of stock picking model, removed the bug and fixed the issue. created list new_moves for partially done quantity and another list for completely done quantity. created conditions to check -> if found elements in new_moves, else if found that number of all done move are equal to number of total moves, else if found elements in all_done moves and else raise error.","2.0","2022-02-12 07:39:00","2022-02-12 07:44:59","2022-02-12 07:44:59","__export__.res_users_604"
"__export__.project_task_work_537123","__export__.project_task_73048","__export__.project_task_work_summary_type_149","Meeting: Training - Personality Development","2.0","2022-02-12 07:00:00","2022-02-12 07:25:36","2022-02-12 07:25:36","__export__.res_users_604"
"__export__.project_task_work_536870","__export__.project_task_72267","__export__.project_task_work_summary_type_30","38./ Requirement 14: 1) Created account.tax.ept model for storing tax information 2) In Product model I have added the many2many field that points to account tax model. 3) In sale order line model I have added many2many field of account tax model and added a compute store true field that calculate subtotal including tax. 4) for sale order I have created a compute store true field named total_tax that calculates total tax applicable on all order lines and also created a compute store true field ""total_amount"" that adds the subtotal with tax of all order lines and gives total amount of current order including tax.","2.0","2022-02-11 13:31:19","2022-02-11 13:38:31","2022-02-11 13:38:31","__export__.res_users_604"
"__export__.project_task_work_536856","__export__.project_task_72267","__export__.project_task_work_summary_type_30","37./ Requirement 13: Now we can enter warehouse location for each order line, so the requirement is that on confirm sale order it will group sale order line based on warehouse location and create a separate stock picking for each group. -->> I have achieved the given requirement using the dictionary to store the location id as key and list of triplets as value of that key.","3.0","2022-02-11 13:26:58","2022-02-11 13:31:01","2022-02-11 13:31:01","__export__.res_users_604"
"__export__.project_task_work_536850","__export__.project_task_72267","__export__.project_task_work_summary_type_30","36./ Requirement 12: 1) I have learned to create button box in the form view of the sale order 2) Created 2 buttons named Delivery and Stock Moves in the form view of sale order 3) Clicking on  Delivery button will return the tree view of Delivery order if there are multiple delivery associated with this sale order or else if there is only one delivery order then it will return form view of that delivery order.  4) Clicking on  Stock Moves button will return the tree view of Stock Moves if there are multiple stock moves associated with this sale order or else if there is only one stock move then it will return form view of that Stock move. ","3.5","2022-02-11 13:20:40","2022-02-11 13:26:53","2022-02-11 13:26:53","__export__.res_users_604"
"__export__.project_task_work_536537","__export__.project_task_72267","__export__.project_task_work_summary_type_30","35./ Requirement 10: 1) Created button Update Stock of type object, which calls a method and that method returns a dictionary of action of that transient model, we can also get the dictionary of that record using _from_xml_id method of window action model and return it so, that it will open wizard of that transient model. ->> Requirement 11: Created Button Update stock of type action that directly calls action of transient model and for that we have to define xml id of that model in name=""%(xml_id)d"" syntax which actually returns the id of that record in ir.actions.act_window model. On clicking that button it directly opens the wizard for that transient model.","0.5","2022-02-10 13:35:19","2022-02-10 13:41:28","2022-02-10 13:41:28","__export__.res_users_604"
"__export__.project_task_work_536520","__export__.project_task_72267","__export__.project_task_work_summary_type_30","34./ Requirement 9:  1) Created a transient model for wizard and defined action that has value of binding_model_id, binding_type, target, view_types, view_id in name attribute. that allow us to create a wizard. we can access this wizard using contextual button in action menu. Now in wizard we can see the system stock quantity of the product. we can get the id of product using self.env.context['active_ids'][0] and now we can update the quantity of the product using Update Stock button which creates record for inventory and associated inventory lines then we have to validate the inventory using existing method of inventory model, now that will actually updates the stock of this product in a particular location and reflects the changes. ","2.0","2022-02-10 13:23:25","2022-02-10 13:35:12","2022-02-10 13:35:12","__export__.res_users_604"
"__export__.project_task_work_536492","__export__.project_task_72267","__export__.project_task_work_summary_type_30","33./ Requirement 8: 1) Change the logic of validating delivery order and incoming shipment: It created a new stock picking for partially delivered order in done state directly and also generates stock moves in done state for that partially delivered products, If not a single product is delivered or done then it raises the warning and do not allow user to validate the stock picking, If all product demands are delivered then it Validates the current picking order and also validates associated sale order, sale order lines or purchase order purchase order lines. Hence, Requirement 8: Initially completed and gives desired output. ","6.0","2022-02-10 13:13:21","2022-02-10 13:23:20","2022-02-10 13:23:20","__export__.res_users_604"
"__export__.project_task_work_536211","__export__.project_task_72267","__export__.project_task_work_summary_type_30","32./ Requirement 7: 1) Button: Start Inventory, Validate Inventory and Cancel Inventory.  -> Start Inventory: This button gets all the products and add location id as a item into context dictionary of product. now that passed item is checked in the compute method of the product model which then finds the product stocks available in that location. now we can display product stocks of that location in the view of inventory. 2) now we can audit and calculate the actual quantity of product 3) After entering the actual stock quantity we can validate the inventory which then creates the stock moves that adjusts the stocks accordingly. 4) Added the button of Cancel Inventory.","8.5","2022-02-09 13:14:24","2022-02-09 13:28:55","2022-02-09 13:28:55","__export__.res_users_604"
"__export__.project_task_work_535985","__export__.project_task_72267","__export__.project_task_work_summary_type_30","31./ Requirement 7: 1) I have added the Button for the confirm sale order and confirm purchase order that confirms the respected order and make delivery order for sale order and incoming shipment for purchase order, 2) I have added cancel button in sale order: which only allows to cancel order if order in not in done state, delivery order is in cancelled state. 3) I have created the cancel purchase order button which allows to cancel order if it is not in done state and incoming shipment of that order is in cancelled state or it does not exists at all, 4) I have created the validate button for Stock picking which changes state of stock picking, stock moves to ""done"" , 5) I have created views for Inventory and Inventory lines","8.5","2022-02-08 13:38:59","2022-02-08 13:46:31","2022-02-08 13:46:31","__export__.res_users_604"
"__export__.project_task_work_535649","__export__.project_task_72267","__export__.project_task_work_summary_type_30","30./ Requirement 7: I have analysed the Requirement and understood the problem definition of the requirement, 1) Warehouse and Location: Warehouse is the a storage area for the products, warehouse has different locations in which products are stored 2) Sale Order: When sale order is confirmed: delivery order and stock moves is generated, 3) Purchase Order: When purchase order is confirmed Incoming shipment and stock moves is generated 4) We generate the delivery order and incoming shipment in the single model called stock picking and we have another model for stock moves which tracks the movements of the stock 5) Inventory: sometimes we needs to make adjustments in the system stock because due to some unforeseen reason we actually have more stock available then system quantity or less stock available then the system quantity. at that time we use and creates the Inventory. 6) Requirement 7: Created the models, created the views Logical part is remaining.","8.5","2022-02-07 13:34:51","2022-02-07 13:47:53","2022-02-07 13:48:53","__export__.res_users_604"
"__export__.project_task_work_535109","__export__.project_task_72267","__export__.project_task_work_summary_type_30","29./ Watched the videos on Requirement 7: Understood the terminologies like warehouse, location, picking, stock moves, purchase order and purchase line. Here Warehouse is where the products are stored, in the warehouse there may have multiple location in which products are stored. And there are different types of location. purchase order have information about vendor, state and warehouse. purchase order line have information about the products which we are going to purchase in a purchase order. Inventory is used when we have to adjust the stock of the product, When auditing if detected a mismatch in the actual stock count and system stock count then we have to adjust the stock in the system and define the stock moves accordingly. for that we can call compute method of product stock in which we can add logic for the count of a product in the particular location. Here we can use with_context method to pass the id of location in the context dictionary.","3.0","2022-02-04 13:22:29","2022-02-04 13:31:52","2022-02-04 13:32:37","__export__.res_users_604"
"__export__.project_task_work_535084","__export__.project_task_72267","__export__.project_task_work_summary_type_27","28./ Analysed the requirement 7 defined the problem statement and understood the requirement.","0.5","2022-02-04 13:21:19","2022-02-04 13:22:23","2022-02-04 13:22:23","__export__.res_users_604"
"__export__.project_task_work_535081","__export__.project_task_72267","__export__.project_task_work_summary_type_30","27./ Requirement 6: Written the logic for Generate customer button which creates customer in partner model. Written Logic for Generate sales order. which generates Sale Order from the Lead information and creates order lines form lead lines, here i have used new method to call onchange method of sale order class to get the invoice address and shipping address. Hence, Requiremet 6: Initially completed and gives desired output","2.5","2022-02-04 13:15:42","2022-02-04 13:20:20","2022-02-04 13:32:37","__export__.res_users_604"
"__export__.project_task_work_535070","__export__.project_task_72267","__export__.project_task_work_summary_type_30","27./ Requirement 6: created the buttons for qualified, proposition, won and lost state. also created the button for generate customer and generate sale order, this 2 buttons are only visible in won state.","2.5","2022-02-04 13:13:37","2022-02-04 13:15:36","2022-02-04 13:15:36","__export__.res_users_604"
"__export__.project_task_work_534783","__export__.project_task_72267","__export__.project_task_work_summary_type_30","26./ Requirement 6: 1) Understood and Analysed the requirement, 2) Created model for crm.team.ept, crm.lead.ept and crm.lead.line.ept  3) Created view, menu and action for the crm.team.ept and crm.lead.ept 4) Logical part of the program is remaining..","1.5","2022-02-03 14:03:08","2022-02-03 14:06:01","2022-02-03 14:06:01","__export__.res_users_604"
"__export__.project_task_work_534782","__export__.project_task_72267","__export__.project_task_work_summary_type_30","25./ Meeting with project manager: discussed api onchange and api compute, Reviewed Requirement 5, Analysed and defined the problem statement of the requirement 6","0.5","2022-02-03 14:00:56","2022-02-03 14:02:50","2022-02-03 14:06:01","__export__.res_users_604"
"__export__.project_task_work_534781","__export__.project_task_72267","__export__.project_task_work_summary_type_30","24./ Requirement 5: added api onchange method on partner_id field to automatically get the value of partner_invoice_id and partner_shipping_id field.","1.5","2022-02-03 13:58:29","2022-02-03 14:00:37","2022-02-03 14:00:37","__export__.res_users_604"
"__export__.project_task_work_534780","__export__.project_task_72267","__export__.project_task_work_summary_type_30","23./ Requirement 5: added sql constraint method on country code field of res.country.ept model, added api constraint on state code field of res.state.ept model of unique, used api onchange method to fetch unit-price and quantity on order lines, made a compute store true field in order lines named sub_total_without_tax, added compute store false methods named total_weight and total_volume, added compute store true field order_total in sale.order.ept .","5.0","2022-02-03 13:50:35","2022-02-03 13:58:23","2022-02-03 13:58:23","__export__.res_users_604"
"__export__.project_task_work_534423","__export__.project_task_72267","__export__.project_task_work_summary_type_30","22./ Learned about compute methods: 2 types: store true and store false. 1) Store False: Fields are not stored in db, called always when we fetch records, not available in search view, 2) Store True: Stored in db, called only at a time of inserting value or change in dependent values. 3) api.onchange we can also use this decorator to write a function that calculate and inserts value automatically when field is altered, but this will work only if we are entering data through view (front UI), not functional in case of script.","1.5","2022-02-02 13:32:07","2022-02-02 13:40:56","2022-02-02 13:40:56","__export__.res_users_604"
"__export__.project_task_work_534405","__export__.project_task_72267","__export__.project_task_work_summary_type_30","21./ Meeting with project manager: Discussed and revised the ORM Methods : - create, write, unlink, copy, search, name_search, name_get and browse. 2) Learned about API Constraint and API OnChange","1.0","2022-02-02 13:28:40","2022-02-02 13:32:01","2022-02-02 13:32:01","__export__.res_users_604"
"__export__.project_task_work_534376","__export__.project_task_72267","__export__.project_task_work_summary_type_30","20./ I have implemented unlink method in partner model of sale_ept module that checks if partner has child if yes then it raise User Error and does not allow to unlink the record.","2.0","2022-02-02 13:26:19","2022-02-02 13:27:16","2022-02-02 13:27:16","__export__.res_users_604"
"__export__.project_task_work_534369","__export__.project_task_72267","__export__.project_task_work_summary_type_30","19./ I have created write() method in partner model of sales_ept module for the learning and demonstration purposes. Here in write method vals is a dictionary in which we only gets the data of fields that has been changed and in self we gets the browse object of the current record.","2.0","2022-02-02 13:25:52","2022-02-02 13:26:07","2022-02-02 13:27:16","__export__.res_users_604"
"__export__.project_task_work_534288","__export__.project_task_72267","__export__.project_task_work_summary_type_30","18./ I have Revised the concepts of create() and write() method, I have implemented create method in res.state.ept that check if state code is empty then it fills it with dash, and creates a record for city model and that points to current state record.","2.0","2022-02-02 12:56:18","2022-02-02 12:56:31","2022-02-02 13:27:16","__export__.res_users_604"
"__export__.project_task_work_534002","__export__.project_task_72267","__export__.project_task_work_summary_type_30","17./ API constraint & API onchange: API Constraint is used to check a constraint against field(s), this constraint is verified when create or write method is called, API onchange: is used to get value when a field(s) is changed on view, it gets the values from the cache because the record is not committed yet.","0.5","2022-02-01 14:01:39","2022-02-01 14:05:40","2022-02-01 14:05:40","__export__.res_users_604"
"__export__.project_task_work_534001","__export__.project_task_72267","__export__.project_task_work_summary_type_30","16./ In 4, 5, 6, 7, 8 videos I have learned about name_search(), name_get(), browse(), exists() methiod, name_search() method is used to search name and name_get() is used to display records, browse() method is used to get record without checking that the particular record is available or not, exists() method is used to check that the particular record exists or not it can be used along with browse(),  ","2.0","2022-02-01 13:55:37","2022-02-01 14:01:34","2022-02-01 14:01:34","__export__.res_users_604"
"__export__.project_task_work_534000","__export__.project_task_72267","__export__.project_task_work_summary_type_30","15./ 3rd video: I have learned about unlink() and copy() method. unlink() method is used to delete record from the model, and copy method is used to create a duplicate record, copy method have and additional default parameter which is used to set default value to a field.","1.0","2022-02-01 13:52:40","2022-02-01 13:55:31","2022-02-01 13:55:31","__export__.res_users_604"
"__export__.project_task_work_533999","__export__.project_task_72267","__export__.project_task_work_summary_type_30","14./ Watched videos on ORM Methods in 1st video i have learned about the _sql_constraints and how we can get the object of model, I have learned about create and write methods of the model which is actually defined in the BaseModel class of the models.py file, create() method is called once only and that is when we create a new record, write() it is used every time we update a record, write method only passes the value of fields that is to be updated, I have learned how we can get object of other model using env[], 2nd video I have learned about the search method which is used to search and fetch records from the model. I have learned different parameters of search method like offset, limit, order and count.","5.0","2022-02-01 13:44:36","2022-02-01 13:52:34","2022-02-01 13:52:34","__export__.res_users_604"
"__export__.project_task_work_533630","__export__.project_task_72267","__export__.project_task_work_summary_type_30","13./ Requirement 4: Created Models for product category, product, category of unit of measue, unit of measure, partner, sale order, and order line. created appropriate views and actions for the models in view file, Learned Kanban View, created inline form view for uom category, partner and sale order. created appropriate menus for each model, and defined the 2 security groups for salesperson and manager, defined record rule for the salesperson and manager. ->> Requirement 4: Initially completed and gives desired output.","3.5","2022-01-31 13:43:22","2022-01-31 13:47:24","2022-01-31 13:48:04","__export__.res_users_604"
"__export__.project_task_work_533629","__export__.project_task_72267","__export__.project_task_work_summary_type_27","12./ Requirement 4: Analysed the Requirement 4 and understood the Problem definition: and listed the models required and relation understood between models, list down the fields required in the models","2.0","2022-01-31 13:41:04","2022-01-31 13:43:12","2022-01-31 13:43:12","__export__.res_users_604"
"__export__.project_task_work_533628","__export__.project_task_72267","__export__.project_task_work_summary_type_30","11./ Meeting with Project Manager: Analysed Requirement 3: Access rights and record rule for Manager. ->> Requirement 4: Analysed the problem definition and understood the requirement.","1.0","2022-01-31 13:38:46","2022-01-31 13:40:54","2022-01-31 13:40:54","__export__.res_users_604"
"__export__.project_task_work_533627","__export__.project_task_72267","__export__.project_task_work_summary_type_30","10./ Requirement 3: Added access rights to the fields increment, is_manager, Learned about Group attribute and how we can use it in xml as well as in python file","2.0","2022-01-31 13:35:51","2022-01-31 13:37:59","2022-01-31 13:37:59","__export__.res_users_604"
"__export__.project_task_work_533386","__export__.project_task_72267","__export__.project_task_work_summary_type_30","9./ Requirement 3: Added Record rule for leaves on Middle level Manager and Applied Record rule for Increment field and Is_Manager field.","1.0","2022-01-29 08:00:38","2022-01-29 08:04:11","2022-01-29 08:04:11","__export__.res_users_604"
"__export__.project_task_work_533384","__export__.project_task_72267","__export__.project_task_work_summary_type_30","8./ Meeting with Project Manager: Requirement 3: Understanding Hierarchical structure of Manager and Employee, Accessing fields of another model using many2one foriegn key reference.","0.5","2022-01-29 07:58:19","2022-01-29 08:00:31","2022-01-29 08:00:31","__export__.res_users_604"
"__export__.project_task_work_533301","__export__.project_task_72403","__export__.project_task_work_summary_type_149","Meeting: Training - Code of Ethics, Professional Conduct & Values","2.0","2022-01-29 06:30:00","2022-01-29 06:43:34","2022-01-29 06:43:34","__export__.res_users_604"
"__export__.project_task_work_533183","__export__.project_task_72267","__export__.project_task_work_summary_type_39","Entered and listed down the work summary of the task that i have performed yesterday.","0.5","2022-01-29 04:19:51","2022-01-29 04:21:16","2022-01-29 04:21:16","__export__.res_users_604"
"__export__.project_task_work_533180","__export__.project_task_72267","__export__.project_task_work_summary_type_30","7./ Requirement 3: Learned how we can define and make a model that points to itself, In that case we have many2one field and one2many field in a single model that points to each other. >>Requirement 3: Created module for employee management, created models for department, shift, employee and leaves, department table have information about department name and manager of that department, shift table have information about shifts and employees working on that shifts, employee table have information about employees, manager of that employee, department of that employee, shift of that employee and leaves taken by that employee and user, leaves table have information about leaves dates and information of employee who has taken the leave and status of that leave.","4.0","2022-01-28 04:11:53","2022-01-29 04:19:17","2022-01-29 04:19:32","__export__.res_users_604"
"__export__.project_task_work_533070","__export__.project_task_72267","__export__.project_task_work_summary_type_27","6./ Requirement 3: Watched the video on Requirement 3 analysed and defined the problem statement and gathered the information about the requirement, list down the set of requirements in the notes.","0.5","2022-01-28 03:25:45","2022-01-29 03:26:02","2022-01-29 04:19:17","__export__.res_users_604"
"__export__.project_task_work_533069","__export__.project_task_72267","__export__.project_task_work_summary_type_30","5./ Requirement 2: Watched the video on requirement 2 and learned about many to many relationship in the odoo, learned how many2many relationship is not exclusive like one2many or many2one. Learned how odoo creates another table for managing many2many relationship in odoo, odoo creates that table with _rel suffix. Odoo uses that table for managing relationships, as a convention table name is derived from source table and target table and that table has one column from source table that points to another column from target table and these 2 columns are by default id column of the table. >>Requirement 2: Created a module for student info, created models for student and courses and defined many2many relationship between them. >>Requirement 2: Initially completed and gives desired output.","4.0","2022-01-28 03:25:30","2022-01-29 03:25:41","2022-01-29 04:19:17","__export__.res_users_604"
"__export__.project_task_work_532792","__export__.project_task_72267","__export__.project_task_work_summary_type_30","4./ GitHub Repo created with name: ""odoo_exercise_2"", ->>Requirement 1: Created required module, created model for Country, State and City, and defined Many2one or One2many relational field in each model. Created the views files for Country, State and City, country and state has tree, form, search view, while city has editable tree view, form view and search view, Menuitem: Localization Ept-> Localization -> Countries, States, Cities. added proper action to views and filter and group by in search view. -->> Requirment 1: Initially completed and gives desired output.","2.0","2022-01-27 13:32:57","2022-01-27 13:38:40","2022-01-27 13:38:40","__export__.res_users_604"
"__export__.project_task_work_532783","__export__.project_task_72267","__export__.project_task_work_summary_type_27","3./ Analysed and Understood the requirement 1, Referred the documentation for the Many2one field type and it's comodel_name attribute, name of the many2one field should be sensible and have suffix  ""_id"". Learned and unserstood One2many field type and it's comodel_name, and reverse_name field, here reverse_name fields needs to be the name of field of the model that has many2one relationship with current model.","2.5","2022-01-27 13:26:35","2022-01-27 13:31:37","2022-01-27 13:32:53","__export__.res_users_604"
"__export__.project_task_work_532770","__export__.project_task_72267","__export__.project_task_work_summary_type_30","2./ Watched the video of the relational field: Learned Example of employees and departments, departments and employees, students and courses, ->>Requirement 1: Watched the video of the requirement 1 and understood the problem statement and relationship between the modules. ","2.0","2022-01-27 13:23:12","2022-01-27 13:26:30","2022-01-27 13:26:30","__export__.res_users_604"
"__export__.project_task_work_532756","__export__.project_task_72267","__export__.project_task_work_summary_type_30","1./ Meeting with the project manager: Reviewed Requirement 6 and Requirement 7 of Odoo Exercise 1, ->> Odoo Exercise 2: We have discussed about Relational Fields and it's datatypes, On database level, we have reviewed the concept of primary key and foreign key and how we can define one2one, many2one, one2many and many2many relationship in database tables and we have seen those datatypes in odoo as well, We have studied and reviewed the example of department and employee, passport and counties, product - orderlines, sales-order - order-lines and customer - sales-order relationship","2.0","2022-01-27 13:22:57","2022-01-27 13:23:07","2022-01-27 13:23:07","__export__.res_users_604"
"__export__.project_task_work_532373","__export__.project_task_71859","__export__.project_task_work_summary_type_30","Requirement 7: created the model, view (tree, form, search), security groups (Salesperson and Salesmanager), added a statusbar on the header of form view, learned the use of decorator attribute and used it to highlight the Won, Proposition and Lost record states, learned context_today().strftime() method, added demo data.   =>>> Hence Requirement 7: Initially completed, and ->> Odoo Exercise - 1 Initially Completed.","1.5","2022-01-25 13:05:14","2022-01-25 13:11:12","2022-01-25 13:11:12","__export__.res_users_604"
"__export__.project_task_work_532366","__export__.project_task_71859","__export__.project_task_work_summary_type_30","25./ Requirement 6: Learned to make user group for security and created 2 security group for employee_ept module named, User and Manager. Learned to make a group category in ir.module.category model and made a category named Employee Demo and mapped those 2 user groups to this category.","3.0","2022-01-25 13:00:12","2022-01-25 13:04:56","2022-01-25 13:04:56","__export__.res_users_604"
"__export__.project_task_work_532355","__export__.project_task_71859","__export__.project_task_work_summary_type_30","24./ Watched Video on the requirement 6 and learned to create a new user group for that module","1.0","2022-01-25 12:58:55","2022-01-25 13:00:06","2022-01-25 13:00:06","__export__.res_users_604"
"__export__.project_task_work_532347","__export__.project_task_71859","__export__.project_task_work_summary_type_27","23./ Reviewed and Analysed problem definition of requirement 7: Learned about Lead, Learned how to set decorators in tree view, Learned use of statusbar, Learned Active, Inactive, Archive and Un-archive the field.","2.0","2022-01-25 12:58:24","2022-01-25 12:58:37","2022-01-25 13:00:06","__export__.res_users_604"
"__export__.project_task_work_532329","__export__.project_task_71859","__export__.project_task_work_summary_type_30","22./ Meeting with project manager: Requirement 2, 3, 4 review, revised field's attributes and fields datatype, Learned and understood the Log Field (Magic Field) and Special Fields, Learned How to make own user group and category, Revised attrs, Understood the Requirement 7","1.0","2022-01-25 12:48:36","2022-01-25 12:52:06","2022-01-25 12:52:06","__export__.res_users_604"
"__export__.project_task_work_531993","__export__.project_task_71859","__export__.project_task_work_summary_type_30","21./ Requirement 6: Module name employee_ept and model name is employee.demo.ept created for the employee details and included tree, form, search view. >> Requirement 2,3,4,5,6 : Initially completed and gives desired output","1.0","2022-01-24 13:50:36","2022-01-24 13:52:16","2022-01-24 13:52:16","__export__.res_users_604"
"__export__.project_task_work_531992","__export__.project_task_71859","__export__.project_task_work_summary_type_30","20./ Requirement 5: Learned compute attribute and compute function: Made Module named product_ept included tree form and search view","1.0","2022-01-24 13:48:29","2022-01-24 13:50:30","2022-01-24 13:50:30","__export__.res_users_604"
"__export__.project_task_work_531991","__export__.project_task_71859","__export__.project_task_work_summary_type_30","19./ Learned Copy attribute, context: active_test: False, attrs, name field.  attrs: used to apply attribute conditionally in xml file","0.5","2022-01-24 13:45:47","2022-01-24 13:47:40","2022-01-24 13:50:30","__export__.res_users_604"
"__export__.project_task_work_531990","__export__.project_task_71859","__export__.project_task_work_summary_type_30","18./ Requirement 2,3,4: a Module named localization_ept created, For Requirement 2: Country Details: Name, Country Code, Active fields, Tree, Form, Search Views, Countries and Localization Menu, -->Requirement 3: State Details: Name, State Code, Country Name, Active, Tree, Form, Search View, Sates menu, Requirement 4: City Details: Editable Tree view search view, city menu and action. Requirement 2,3,4: Security: Used Sales_Team User: Own Documents Group, 1 field in each model is not copied during duplicating record","2.5","2022-01-24 13:38:02","2022-01-24 13:45:39","2022-01-24 13:50:30","__export__.res_users_604"
"__export__.project_task_work_531982","__export__.project_task_71859","__export__.project_task_work_summary_type_30","17./ Watched the video on log fields and special field:  1. Log Fields: also known as Magic Fields are created and handled by the odoo frame work. fields are id: it is a primary key auto-increment id, create_date: date when the record is created, created_uid: User who created the record or by whom the record is created, write_date: date at which record is modified, write_uid: by whom record is modified,  -->> 2. Special Field: name: In odoo everything is addressed by the name, active: whether the record is in use or not, sequence: defines priority of that field, parent_id: defined id of the parent, company_id: Id of the company which is using erp. _rec_name: can use another field as a name","2.0","2022-01-24 13:29:13","2022-01-24 13:37:57","2022-01-24 13:37:57","__export__.res_users_604"
"__export__.project_task_work_531958","__export__.project_task_71859","__export__.project_task_work_summary_type_30","16./ Reviewed and watched the video about fields attributes and that are: required, readonly, copy, index, invisible, default","1.0","2022-01-24 13:24:29","2022-01-24 13:28:41","2022-01-24 13:28:41","__export__.res_users_604"
"__export__.project_task_work_531951","__export__.project_task_71859","__export__.project_task_work_summary_type_30","15./ Meeting with Project Manager: Requirement 1 reviewed, Given the task to find out about ""attrs"" in odoo, and find out details about name field in odoo, -->>Requirement 2,3,4: Information Gathering and Understanding the Problem statement. ","0.5","2022-01-24 13:20:06","2022-01-24 13:24:24","2022-01-24 13:24:24","__export__.res_users_604"
"__export__.project_task_work_531665","__export__.project_task_71859","__export__.project_task_work_summary_type_30","14./ Requirement 1: Module 4: completed and tested.  ->> Information gathering and understanding the task 4th Module of Requirement 1 is res_partner_demo_ept4 and model name is res.partner.demo.ept4 and it has name, email, street1, street2, city, state, country, zip_code, age, birthdate, weight, is_spectacle, gender, description, details etc field and created tree, form and search view, window action, 3 menuitems, search by name, city, state, country, zipcode and group by gender, country, state, city and filtered by Male, Female and Spectacles.  -->> created notebook view.  ==>> Requirement 1: Initially Completed and gives desired output. ---x--","1.0","2022-01-22 08:09:58","2022-01-22 08:13:08","2022-01-22 08:13:08","__export__.res_users_604"
"__export__.project_task_work_531664","__export__.project_task_71859","__export__.project_task_work_summary_type_30","14./ Requirement 1: Module 3: completed and tested.  ->> Information gathering and understanding the task 3rd Module of Requirement 1 is res_partner_demo_ept3 and model name is res.partner.demo.ept3 and it has name, email, street1, street2, city, state, country, zip_code, age, birthdate, weight, is_spectacle, gender, description, details etc field and created tree, form and search view, window action, 3 menuitems, search by name, city, state, country, zipcode and group by gender, country, state, city and filtered by Male, Female and Spectacles.  -->> created notebook view.","1.75","2022-01-22 08:09:00","2022-01-22 08:09:48","2022-01-22 08:13:08","__export__.res_users_604"
"__export__.project_task_work_531765","__export__.project_task_72108","__export__.project_task_work_summary_type_149","Meeting: Training - Campus to Corporate","1.25","2022-01-22 05:45:00","2022-01-24 04:42:49","2022-01-24 04:42:49","__export__.res_users_604"
"__export__.project_task_work_531720","__export__.project_task_71859","__export__.project_task_work_summary_type_111","Meeting or seminar on Campus to Corporate, It was about the journey from campus to corporate environment, We have learned what are the requirements of the corporate and how people for corporate can be an assets or a liability. We have given the task to perform our swot analysis.","1.5","2022-01-22 03:50:17","2022-01-24 03:51:16","2022-01-24 03:51:16","__export__.res_users_604"
"__export__.project_task_work_531427","__export__.project_task_71859","__export__.project_task_work_summary_type_27",".Learned to create the notebook view in form view and understood  it's attributes and sub-elements.","0.25","2022-01-21 13:52:04","2022-01-21 13:53:44","2022-01-21 13:54:00","__export__.res_users_604"
"__export__.project_task_work_531423","__export__.project_task_71859","__export__.project_task_work_summary_type_39","Written and described the work as Task Summary and listed the performed activity during the entire day.","0.416666666667","2022-01-21 13:49:07","2022-01-21 13:51:11","2022-01-21 13:53:44","__export__.res_users_604"
"__export__.project_task_work_531416","__export__.project_task_71859","__export__.project_task_work_summary_type_30","14./ Requirement 1: Module 2: completed and tested.  ->> Information gathering and understanding the task 2nd Module of Requirement 1 is res_partner_demo_ept2 and model name is res.partner.demo.ept2 and it has name, email, street1, street2, city, state, country, zip_code, age, birthdate, weight, is_spectacle, gender, description, details etc field and created tree, form and search view, window action, 3 menuitems, search by name, city, state, country, zipcode and group by gender, country, state, city and filtered by Male, Female and Spectacles.  -->> created notebook view.","2.0","2022-01-21 13:48:14","2022-01-21 13:48:53","2022-01-21 13:54:43","__export__.res_users_604"
"__export__.project_task_work_531414","__export__.project_task_71859","__export__.project_task_work_summary_type_30","14./ Requirement 1: Module 1: completed and tested.  ->> Information gathering and understanding the task 1st Module of Requirement 1 is res_partner_demo_ept1 and model name is res.partner.demo.ept1 and it has name, email, street1, street2, city, state, country, zip_code, age, birthdate, weight, is_spectacle, gender, description, details etc field and created tree, form and search view, window action, 3 menuitems, search by name, city, state, country, zipcode and group by gender, country, state, city and filtered by Male, Female and Spectacles.  -->> created notebook view.","3.0","2022-01-21 13:40:58","2022-01-21 13:46:56","2022-01-21 13:48:53","__export__.res_users_604"
"__export__.project_task_work_531410","__export__.project_task_71859","__export__.project_task_work_summary_type_30","13./ Watched Last Module creation video, which describes the folder structure, configuration file, Model creation, models.py and fields.py framework file structure, view file creation ir.ui.view, tree view, form view, search view, ir.action.act_window, menuitems, access security, data file...","1.0","2022-01-21 13:36:22","2022-01-21 13:40:51","2022-01-21 13:40:51","__export__.res_users_604"
"__export__.project_task_work_531200","__export__.project_task_71859","__export__.project_task_work_summary_type_30","12./ Meeting with Project Manager: Discussed about Module creation: revised configuration file and it's parameters, addons path, Creating a Module, __init__.py and __manifest__.py file, folder Structure, discussed the Parameters inside manifest file, model creation, odoo framework source code overview of models.py file and fields.py file and classes, properties of that classes inside that files, views files and specifying that files in manifest file, record creation of ir.ui.view, ir.actions.act_window, ir.ui.menu, etc.., setting security access rights to model using csv file, mentioning dependent modules in manifest file, sequence of import and depends in manifest file.  ==>> Requirement 1: explained, given task to implement and Learn Notebook View.","1.83333333333","2022-01-21 06:23:17","2022-01-21 06:58:29","2022-01-21 06:58:29","__export__.res_users_604"
"__export__.project_task_work_531096","__export__.project_task_71859","__export__.project_task_work_summary_type_30","11./ Watched 1st video on Module creating and created a Real Estate Module for learning purposes, defined and created Model, BaseModel, Fields, xml file inside view folder that has tree view, form view, search view, action: ir.actions.act_window, 3 menuitems element and learned record tag. created a ir.model.access.csv file for access right of that model and Tested and Verified the output.","3.0","2022-01-20 13:55:22","2022-01-20 14:01:00","2022-01-20 14:01:00","__export__.res_users_604"
"__export__.project_task_work_531095","__export__.project_task_71859","__export__.project_task_work_summary_type_30","10./ Folder Structure: Module Folder, __init__.py file and it's importance of sequence of import,   __manifest__.py file importance of sequence of data file, and depends files, models, views, wizard, reports, controllers, security, static, data.","0.5","2022-01-20 13:50:40","2022-01-20 13:55:12","2022-01-20 13:55:12","__export__.res_users_604"
"__export__.project_task_work_531094","__export__.project_task_71859","__export__.project_task_work_summary_type_30","9./ Meeting with project manager: Discussed about 1. Module 2. Model: model contains business logic and in loose definition it is a set or records or a table, Logical partition : Business Model and Framework Model, Technical Partition: Model, Abstract Model, Transient Model, Odoo Model: ir.model,  3. Fields: Odoo Model: ir.model.fields, Datatypes of fields and attributes of fields, 4. View: visual element or UI list view, kanban view, calendar view, pivot view, graph view, activity view, form view, search view, we can specify multiple view on single model, 5. Action: what to do, can load view, run script in background, Types of action: Window, Server, Client, URL, Report. Odoo Model: ir.actions.actions, ir.actions.act_window. 6. Menu: Top Level Menu, and Other sub Menu, Odoo model: ir.ui.menu, 7./ Security: Odoo Model: ir.model.access, ir.rule, res.groups whole topic covered    ==>> Special Mention Domain and Context in ir.actions.act_window table records, view and view xml id sequence in ir.actions.act_window","2.0","2022-01-20 13:33:36","2022-01-20 13:50:25","2022-01-20 13:50:25","__export__.res_users_604"
"__export__.project_task_work_530831","__export__.project_task_71859","__export__.project_task_work_summary_type_30","8./ Security: Odoo Model: ir.model.access, 2 types of rules: Access Rule and Record Rule, Access Rule defines create, read, update, delete access right to various user groups on Model and Menu. -> Record Rule or filter: Mode: ir.rule, it is CRUD activity tracker or trigger, It defines rule that allow valid user to read certain record or perform operation. It is second level security. For example: A salesperson can only access orders which are created by him only. while records created by other salesperson will not be visible to current salesperson. Global Rule: Applicable to all users, Group Rule: Applicable to particular user, Rule Applicable to user = Global Rule 1 and Global Rule 2 and ... and (Group Rule 1 or Group Rule 2 or ...)","1.0","2022-01-20 03:54:55","2022-01-20 04:04:48","2022-01-20 04:19:51","__export__.res_users_604"
"__export__.project_task_work_530810","__export__.project_task_71859","__export__.project_task_work_summary_type_30","7./ Menu: screen shown after login is called main dashboard, and apps in it are called Top Level Menu, Odoo Model: ir.ui.menu, defines menu hierarchy and lists menu that has action associated with it.","1.0","2022-01-20 03:50:17","2022-01-20 03:53:49","2022-01-20 04:04:48","__export__.res_users_604"
"__export__.project_task_work_530760","__export__.project_task_71859","__export__.project_task_work_summary_type_30","6./ Views: list view, kanban view, calendar view, pivot view, graph view, activity view, form view, search view.  -> we can define multiple views for a single model also.  -=> Action: defines what to do. can load view, run a script in background, attached to model. called form menu or contextual menu, types of action: ->> Window, Server, Client, URL, Report, Schedule Action or Cron Job, Odoo model: ir.actions.actions, ir.actions.act_window","2.0","2022-01-19 13:50:55","2022-01-19 13:53:07","2022-01-20 04:04:48","__export__.res_users_604"
"__export__.project_task_work_530617","__export__.project_task_71859","__export__.project_task_work_summary_type_30","5./ Fields: Fields are basically like column in database but in odoo we call it field instead of column. Likewise Fields also have datatypes. In Odoo datatypes of fields are Integer, Float, Boolean, Char, Html, Binary, Image, ManytoOne, OnetoMany etc...,   -=> Attributes: required, readonly, copy, index, invisible,default etc.. ","2.0","2022-01-19 10:11:31","2022-01-19 10:16:29","2022-01-19 10:16:29","__export__.res_users_604"
"__export__.project_task_work_530612","__export__.project_task_71859","__export__.project_task_work_summary_type_30","4./ Model: Model is basically a folder or a database table in loose definition. Model handles business logic and communicates with database to perform and fulfil the needs of that business logic.   -=> Model, Transient Model, Abstract Model, Transient Model : Stores Data Temporary, It may used in wizards or popup screens because in such cases we don't need that data in future after our work is completed similarly can be used to generate reports.","2.0","2022-01-19 10:01:11","2022-01-19 10:11:16","2022-01-19 10:11:16","__export__.res_users_604"
"__export__.project_task_work_530608","__export__.project_task_71859","__export__.project_task_work_summary_type_30","3./ Module: Watched the video and understood that every thing in odoo is module and how we can install and upgrade the module, Developer Mode in Odoo.","0.333333333333","2022-01-19 09:58:05","2022-01-19 10:01:04","2022-01-19 10:01:04","__export__.res_users_604"
"__export__.project_task_work_530605","__export__.project_task_71859","__export__.project_task_work_summary_type_30","2./ Meeting with Project Manager Videos are given to us and explained the work and learning process.","0.25","2022-01-19 09:56:26","2022-01-19 09:58:00","2022-01-19 09:58:00","__export__.res_users_604"
"__export__.project_task_work_530500","__export__.project_task_71859","__export__.project_task_work_summary_type_30","1./ Created a Module named 'estate' and it's model for learning purposes and installed that module, Read 3 chapters from Odoo documentation and understood the use of Manifest file and it's configuration. Currently Learning Views and creation of menu, and generating UI with xml file","2.0","2022-01-19 05:58:05","2022-01-19 05:58:12","2022-01-19 06:19:20","__export__.res_users_604"
"__export__.project_task_work_530567","__export__.project_task_71258","__export__.project_task_work_summary_type_30","4./ GitHub Repository odoo_exercise_1 created. Created new PyCharm project for Odoo and project name is Odoo, Project has Odoo Community and Enterprise edition, added the addons paths of odoo built-in addons, custom addons and Enterprise addons to the configuration file. Created A Module named 'estate' and created estate.properties model for it and installed that module into Odoo.","3.0","2022-01-18 09:03:00","2022-01-19 09:03:10","2022-01-19 09:10:22","__export__.res_users_604"
"__export__.project_task_work_530504","__export__.project_task_71258","__export__.project_task_work_summary_type_30","3./ Odoo Configuration with PyCharm, PostgreSQL configuration, odoo configuration file, dependencies installation, python version upgrade, odoo database creation, odoo ui overview, created a model in odoo, Watched videos Odoo pycharm configuration, odoo sales, inventory, purchase modules and overview of process of business operations. Overview of Odoo source code and odoo modules. Overview of architecture of odoo and odoo ORM layer, Model, Controller, View, Menu, Fields, Actions and Security.","3.5","2022-01-18 06:06:23","2022-01-19 06:13:42","2022-01-19 09:00:31","__export__.res_users_604"
"__export__.project_task_work_530502","__export__.project_task_71258","__export__.project_task_work_summary_type_30","2./ Understood ERP and Odoo: Learned ERP use-cases and analysed the use of ERP in real life with example,  ->Odoo -> Suite of Business applications, Community edition: Execution environment and Built-in Modules, Enterprise edition: Enterprise Modules, Model: business logic, View xml, Controller: connector, Action, Fields, Menu, Security Overview","3.0","2022-01-18 06:03:44","2022-01-19 06:06:16","2022-01-19 09:00:31","__export__.res_users_604"
"__export__.project_task_work_530501","__export__.project_task_71258","__export__.project_task_work_summary_type_30","1./ Meeting with project manager ->ERP: Discussed about ERP (what is ERP?), funcitons and uses of ERP, discussed some use-cases of ERP, and defined the purpose of ERP.  ->Framework:  what is Framework, what are the advantages of using framework, MVC architecture.  -> Odoo :  what is Odoo, python, xml, javascript, css, html, Community and Enterprise Edition, why odoo, what are the modules...","0.75","2022-01-18 05:59:54","2022-01-19 06:00:49","2022-01-19 09:01:20","__export__.res_users_604"
"__export__.project_task_work_529875","__export__.project_task_70974","__export__.project_task_work_summary_type_30","28./ XML Node types and constants, Node object properties, node object methods. --> xml.dom.minidom  - parse(), parseString(), file.firstChild.tagName, getElementsByTagName(), getAttribute(), hasAttribute(), .childNodes, .attributes, .attributes.items(), getDOMImplementation().  --> CSV module  -  csv.reader(), csv.writer(), writerow(), writerows(), csv.DIctReader(), csv.DictWriter(), next(), DIctWriter.writeheader(). --> OpenPyXl module -  workbook, worksheet, create_sheet(), title, copy_worksheet(), cell(), iter_rows(), iter_cols(), append(), save(), load_workbook().","2.0","2022-01-17 11:38:57","2022-01-17 11:47:17","2022-01-17 11:47:17","__export__.res_users_604"
"__export__.project_task_work_529870","__export__.project_task_70974","__export__.project_task_work_summary_type_30","27./ Revision of Python Math module (min(), max(), abs(), pow(), sqrt(), ceil(), floor(), math.pi),  -->  JSON (JavaScript Object Notation) (loads(), dumps(), Format JSON output and format separators) Python objects that can be converted into JSON are dict, list, tuple, str, int, float, True, False, None. JSON types are object, Array, String, Number, true, false, null. --> Try Except revised try, except, finally, else, raise --> Revised User Input input() method.  --> String Format, multiple values, index number, Named indexes. --> File Handling open(), Modes (r - read, a - append, w - write, x - create, t - text, b - binary) read(), readline(), readlines(), close(), append(). --> os Module -  os.remove(), os.path.exists(), os.rmdir()","4.0","2022-01-17 11:36:15","2022-01-17 11:36:26","2022-01-17 11:36:26","__export__.res_users_604"
"__export__.project_task_work_530191","__export__.project_task_71258","__export__.project_task_work_summary_type_30","28./ XML Node types and constants, Node object properties, node object methods. --> xml.dom.minidom  - parse(), parseString(), file.firstChild.tagName, getElementsByTagName(), getAttribute(), hasAttribute(), .childNodes, .attributes, .attributes.items(), getDOMImplementation().  --> CSV module  -  csv.reader(), csv.writer(), writerow(), writerows(), csv.DIctReader(), csv.DictWriter(), next(), DIctWriter.writeheader(). --> OpenPyXl module -  workbook, worksheet, create_sheet(), title, copy_worksheet(), cell(), iter_rows(), iter_cols(), append(), save(), load_workbook().","2.0","2022-01-17 08:53:41","2022-01-18 08:53:53","2022-01-18 08:54:49","__export__.res_users_604"
"__export__.project_task_work_530188","__export__.project_task_71258","__export__.project_task_work_summary_type_30","27./ Revision of Python Math module (min(), max(), abs(), pow(), sqrt(), ceil(), floor(), math.pi),  -->  JSON (JavaScript Object Notation) (loads(), dumps(), Format JSON output and format separators) Python objects that can be converted into JSON are dict, list, tuple, str, int, float, True, False, None. JSON types are object, Array, String, Number, true, false, null. --> Try Except revised try, except, finally, else, raise --> Revised User Input input() method.  --> String Format, multiple values, index number, Named indexes. --> File Handling open(), Modes (r - read, a - append, w - write, x - create, t - text, b - binary) read(), readline(), readlines(), close(), append(). --> os Module -  os.remove(), os.path.exists(), os.rmdir()","3.0","2022-01-17 08:52:48","2022-01-18 08:52:58","2022-01-19 06:00:49","__export__.res_users_604"
"__export__.project_task_work_529603","__export__.project_task_71258","__export__.project_task_work_summary_type_30","26./ Program 11 --> Missing functionality remaining hours added comments added and Done.  --> Program 9 --> Issue with Order State is resolved and created a Improved version of program in 2.py file which has slightly less code complexity in change_order_state() method and comments are added.  --> Program 12 --> comments are added, Issue with Order State and Delivery State is resolved and slightly reduced the code complexity of change_order_state() and change_delivery_order_state() method.","2.0","2022-01-15 06:35:33","2022-01-15 06:35:42","2022-01-19 06:00:49","__export__.res_users_604"
"__export__.project_task_work_529593","__export__.project_task_71258","__export__.project_task_work_summary_type_30","25./ Meeting with Project Manager --> reviewed the Program 9 ---> Issue with Order State is found and comments are not added to program by me..    --> Program 10 --> Reviewed and Done.  --> Program 11 --> Reviewed and found remaining hours functionality missing  --> Program 12 -->  reviewed and found issue with delivery order State and comments are not added by me..","0.666666666667","2022-01-15 06:21:31","2022-01-15 06:25:51","2022-01-15 06:25:51","__export__.res_users_604"
"__export__.project_task_work_529392","__export__.project_task_71258","__export__.project_task_work_summary_type_30","24./ Program 12 --> Initially Done and gives desired output. class Sales_Order created and it inherits SalesTransaction class It has prepare_delivery_order() method, manage_delivery_order() method, create_delivery_order() method, set_order_state_to_confirm() method inherit and called manage_delivery_order() from it, display_delivery_order() method, change_delivery_order_status() method, cancel_delivery_order() method, validate_delivery_order() method inherits set_order_to_done() method.","2.5","2022-01-13 10:59:57","2022-01-13 11:28:45","2022-01-19 06:00:49","__export__.res_users_604"
"__export__.project_task_work_529393","__export__.project_task_71258","__export__.project_task_work_summary_type_27","23./ Program 12 --> Analysed the requirements gathered the information and states the problem definition of program. Menu Driven Program 1. Validate Delivery 2. Cancel Order Delivery options in the menu added, new Dictionary called delivery_order needs to be created when order state is confirmed.","2.5","2022-01-13 10:54:00","2022-01-13 11:28:45","2022-01-13 11:28:45","__export__.res_users_604"
"__export__.project_task_work_529377","__export__.project_task_71258","__export__.project_task_work_summary_type_30","22./ Program 11 --> Initially Done and gives desired output. I have used filter() method, map() method, list() constructor and sum() method. Thus I have learned and understood that items in nested dictionaries can be accessed without using loops. I have learned and understood how items in dictionaries can be filtered to get different Results","2.5","2022-01-13 10:41:17","2022-01-13 10:53:51","2022-01-13 10:53:51","__export__.res_users_604"
"__export__.project_task_work_529368","__export__.project_task_71258","__export__.project_task_work_summary_type_30","21./ Program 10 --> Initially Done and gives desired output. I have used functools.reduce() method, filter() method and sum() method to solve this program. Thus I have understood that items nested list can be accessed without using loops.","1.5","2022-01-13 10:37:52","2022-01-13 10:41:00","2022-01-13 10:53:51","__export__.res_users_604"
"__export__.project_task_work_529364","__export__.project_task_71258","__export__.project_task_work_summary_type_30","20./ Program 9 --> Errors in order state and order_lines state are solved. Separate function created for Set to Draft, Set to Confirm, Set to Done and Set to Cancel. Thus improves code re-usability.","2.0","2022-01-13 10:33:30","2022-01-13 10:37:40","2022-01-13 10:37:40","__export__.res_users_604"
"__export__.project_task_work_529064","__export__.project_task_71258","__export__.project_task_work_summary_type_30","19./ Meeting with Project Manager --> program 6, 7, 8 evaluated ,  -->Program 9 --> Description and problem definition and input, output are given. Basic Structure of program and way of coding are explained","0.616666666667","2022-01-12 13:24:20","2022-01-12 13:27:26","2022-01-12 13:27:26","__export__.res_users_604"
"__export__.project_task_work_529061","__export__.project_task_71258","__export__.project_task_work_summary_type_30","18./ Program 9 --> Initially Done and gives desired output.   --->    product_details dictionary, product_stock dictionary, customer_details dictionary, customer_address dictionary, order_details_dictionary, manage_product() function, prepare_product() function, create_product() function, manage_customer() function, prepare_customer() function, create_customer() function, generate_order() function, prepare_order() function, prepare_order_lines() function, create_sales_order function, display_products() function, display_customers() function, display_sales_order() function, update_product() function, change_order_state() function, generate_invoice() function.    --> Issues and Errors Solved all Functionalities are implemented.","4.0","2022-01-12 13:21:28","2022-01-12 13:23:39","2022-01-15 06:35:27","__export__.res_users_604"
"__export__.project_task_work_529050","__export__.project_task_71258","__export__.project_task_work_summary_type_27","17./ Analysing The Requirements of Program 9 --> Menu Driven Program,   --> Program 9 Video watched, that described the functionality, input, output, code re-usability and readability.   --> Understood why i should create separate function for user_input or preparation, manager function to pass input data to appropriate method, and create function to create dictionary or assigning values to global variable or properties.   Thus enhancing code re-usability (function can be inherited in future), readability and reducing redundancy ","5.0","2022-01-12 13:11:53","2022-01-12 13:12:12","2022-01-15 06:35:27","__export__.res_users_604"
"__export__.project_task_work_528738","__export__.project_task_71258","__export__.project_task_work_summary_type_30","16./ Meeting with Project Manager : Program 4 is evaluated and reviewed","0.5","2022-01-11 13:52:41","2022-01-11 13:53:43","2022-01-11 13:53:43","__export__.res_users_604"
"__export__.project_task_work_528739","__export__.project_task_71258","__export__.project_task_work_summary_type_27","15./ Program 9 --> Read the whole problem definition and understood the requirements. Requirements of the programs are Product Dictionary, Customer Dictionary, Sales_Order Dictionary, prepare_product() method, prepare_customer method, manage_product() method, prepare_order_lines() method, prepare_sales_order() method, Create a Menu from which user can navigate through and select appropriate choice to call a method or enter required fields, unique incremental sku with prefix PRD as a key in product dictionary, unique incremental customer id with prefix c as key in customer dictionary, unique incremental sales_order dictionary id as a key","4.0","2022-01-11 13:43:11","2022-01-11 13:53:43","2022-01-11 13:53:43","__export__.res_users_604"
"__export__.project_task_work_528724","__export__.project_task_71258","__export__.project_task_work_summary_type_30","14./ Program 6 --> Removed Unnecessary for loop from the program thus simplifies the program and enhance the readability","0.25","2022-01-11 13:40:59","2022-01-11 13:43:05","2022-01-11 13:43:05","__export__.res_users_604"
"__export__.project_task_work_528536","__export__.project_task_71258","__export__.project_task_work_summary_type_30","13./ Learned openpyxl module and its funcitons like Workbook(), create_sheet(), title(), append(), save(), active(), cell(), load_workbook(), close(), and properties like max_column, max_row.  --> Program 8 --> Initially Done and gives desired output.","1.5","2022-01-11 07:14:08","2022-01-11 07:18:32","2022-01-11 07:18:32","__export__.res_users_604"
"__export__.project_task_work_528534","__export__.project_task_71258","__export__.project_task_work_summary_type_30","12./ Learned csv module methods like writer(), reader(), writerow(), writerows(), open(), accessing through index number.   --> Program 7 --> Initially done and gives desired output. ","0.5","2022-01-11 07:10:31","2022-01-11 07:13:59","2022-01-11 07:13:59","__export__.res_users_604"
"__export__.project_task_work_528532","__export__.project_task_71258","__export__.project_task_work_summary_type_30","11./ Program 6 error solved --> Error was due to looping through csv.reader iterable object 2 times which returns empty list on second loop. Solving Error --> Created a new list variable that stores reader object value and looping, reading value from that list variable","2.5","2022-01-11 06:54:31","2022-01-11 07:10:14","2022-01-11 07:10:14","__export__.res_users_604"
"__export__.project_task_work_528352","__export__.project_task_71258","__export__.project_task_work_summary_type_30","10./ Program 6 --> Progress halted, dictionary from csv file is created, cannot be able to add dictionaries to orderlines list","1.0","2022-01-10 13:48:18","2022-01-10 13:51:05","2022-01-10 13:51:05","__export__.res_users_604"
"__export__.project_task_work_528353","__export__.project_task_71258","__export__.project_task_work_summary_type_30","9./ Learned CSV module of Python. Learned functionality of csv module like reader() function and implementing it with keyword instead of try Except. Learned use of with keyword, Learned to access row as list and row element from csv file, Learned to access fields as a list from csv file","1.0","2022-01-10 13:41:49","2022-01-10 13:51:05","2022-01-10 13:51:05","__export__.res_users_604"
"__export__.project_task_work_528351","__export__.project_task_71258","__export__.project_task_work_summary_type_30","8./ Issues is previous Program is resolved Program 4 total_product_quantity is added, Program 4 requirements and functionality added and fulfilled.   --> Program 5 is Initially completed reading from XML file","1.5","2022-01-10 13:39:41","2022-01-10 13:41:44","2022-01-10 13:41:44","__export__.res_users_604"
"__export__.project_task_work_528343","__export__.project_task_71258","__export__.project_task_work_summary_type_30","7./ Meeting with Project Manager: Program 2 and 3 are analysed and evaluated some readability issues are found,    --> Requirements of Program 4 and 5 are defined, Problem definition is given, and sample output is given","0.666666666667","2022-01-10 13:32:24","2022-01-10 13:37:06","2022-01-10 13:37:06","__export__.res_users_604"
"__export__.project_task_work_528333","__export__.project_task_71258","__export__.project_task_work_summary_type_30","6./ Learning xml.dom.minidom module and it's functions and properties, Learning about DOM (Document Object Model), Learning about XML node types, In xml.dom.mindom module I have learned about parse function, childNodes, ELEMENT_NODE, tagName, nodeName, getAttribute() method, getElementsByTagName() method, firstChild","2.0","2022-01-10 13:21:59","2022-01-10 13:32:18","2022-01-10 13:32:18","__export__.res_users_604"
"__export__.project_task_work_528301","__export__.project_task_71258","__export__.project_task_work_summary_type_30","5./ Learning and Revising some Python Concepts and functions like map(), filter(), zip(), reduce(), accumulate(), all(), any(), sum(), Dict Comprehension, loop through dictionary, sorted() key = , dict sort by value, itemgetter(), use of itemgetter in sorted function, use of itemgetter along with map function in sorted funciton of operator module","3.0","2022-01-10 13:13:49","2022-01-10 13:21:50","2022-01-10 13:21:50","__export__.res_users_604"
"__export__.project_task_work_528021","__export__.project_task_71258","__export__.project_task_work_summary_type_30","3./ Program 1 --> Revised Created a simplified version some issues resolved and Tested.   --> Program 2 --> Initially Done. and Tested has 4 classes (Manufacturing, Purchase(Manufacturing), Scrapping(Manufacturing), Product(Manufacturing))  -->  Program 3 --> Initially done and Tested --> Program 4 --> Initially Done and Tested      4./  All 4 Programs pushed to remote GitHub Directory python_exercise_2  5./ Analysis of program 4 and Indexed, Incremental Dictionary Creation, Update, Item Fetching requirements are analysed","3.0","2022-01-08 08:12:30","2022-01-08 08:25:40","2022-01-15 06:35:27","__export__.res_users_604"
"__export__.project_task_work_528020","__export__.project_task_71258","__export__.project_task_work_summary_type_30","4./ Meeting with Project Manager: Program 1 evaluated, readability and functionality Issue raised, Discussed about Program 2 Requirements and Functionality","0.5","2022-01-08 06:06:56","2022-01-08 08:25:40","2022-01-08 08:25:40","__export__.res_users_604"
"__export__.project_task_work_527749","__export__.project_task_71258","__export__.project_task_work_summary_type_30","2./ Program 1  --> Initially Done   --> GitHub Repository Created  -->PyCharm Project Created  --> Problem Analysed, Problem Defined, Logic Building, Coding, Testing   --> Some Additional Functionality added   --> Program 1 pushed to remote Repository","1.5","2022-01-07 14:04:11","2022-01-07 14:09:15","2022-01-07 14:10:20","__export__.res_users_604"
"__export__.project_task_work_527750","__export__.project_task_71258","__export__.project_task_work_summary_type_39","Previous Task work summary Listed and Described","0.25","2022-01-07 14:02:17","2022-01-07 14:09:15","2022-01-07 14:09:15","__export__.res_users_604"
"__export__.project_task_work_527751","__export__.project_task_71258","__export__.project_task_work_summary_type_30","1./ Meeting with Project Manager: Explained the Task, GitHub Repository name, Do's and Don't in process of completing task","0.75","2022-01-07 13:59:12","2022-01-07 14:09:15","2022-01-07 14:09:15","__export__.res_users_604"
"__export__.project_task_work_527646","__export__.project_task_70978","__export__.project_task_work_summary_type_30","3./ As per Guidance given in the Meeting I have fixed Errors, Readability and Efficiency Issues in the Program.  Some New Concepts are learned and Implemented on the programs like -->  all(), any(), sum(), reduce(), zip(), Dictionary Comprehension, sorted(), itemgetter(), loop through key:val pair using items(), Multiple Inheritance       x==> Task Completed","2.5","2022-01-07 12:09:45","2022-01-07 12:16:15","2022-01-07 12:16:44","__export__.res_users_604"
"__export__.project_task_work_527559","__export__.project_task_70978","__export__.project_task_work_summary_type_39","Listed and Described the Task","0.166666666667","2022-01-07 09:07:31","2022-01-07 09:08:28","2022-01-07 09:08:28","__export__.res_users_604"
"__export__.project_task_work_527557","__export__.project_task_70978","__export__.project_task_work_summary_type_30","2./ Meeting with Project Manager: Programs is reviewed by PM, Issues with Code Readability and Code Efficiency in my code is discussed and highlighted,  --> Suggested things like (all() fq, sum() fq, dict comprehension, diff bet list() and copy(), sorted() and itemgetter(), and use of dict.items() in for loop), --> Suggested to implement Multiple inheritance in Order, Product and Customer program where Order should inherit Customer and Product class.","1.75","2022-01-07 08:55:24","2022-01-07 09:06:46","2022-01-07 09:06:46","__export__.res_users_604"
"__export__.project_task_work_527558","__export__.project_task_70978","__export__.project_task_work_summary_type_30","1./ Revised Git and GitHub concepts like branch, areas like (Untracked files, Modified files, Staging area, Local Repository, Remote Repository), Commands like (checkout, branch, clone, log, add, commit)","2.0","2022-01-07 08:50:54","2022-01-07 09:06:46","2022-01-07 09:06:46","__export__.res_users_604"
"__export__.project_task_work_527354","__export__.project_task_70978","__export__.project_task_work_summary_type_30","1./ Created new GitHub Repository (python_exercise_1),  2./ Python Exercise 1 : All 38 programs of the exercise are done but may need to revise if some of them can be optimised or can be able to shorten by using functions like lambda, filter, map, reduce, zip;  -> I have pushed all the programs of python exercise 1 into GitHub Repository python_exercise_1 on branch shyamg;  -> Most Frequent concepts I have used and covered in programs are: variable, datatypes, Set, Tuple, List, Dictionary, List Comprehention, Arbitary Arguments, List or Tuple inside Dictionary, Nested Dictionaries, Looping Through Iterable objects(list, tuple, set etc..), Various Methods of accessing dictionary and Iterable object's items, Functions, Lambda Functions, Filter Function, Map Function, Range Function, Inheritance ( Multi Level Inheritance)","8.5","2022-01-06 13:27:34","2022-01-06 13:39:33","2022-01-07 04:49:20","__export__.res_users_604"
"__export__.project_task_work_527136","__export__.project_task_70978","__export__.project_task_work_summary_type_27","1./ Analyse and Review The Programs,   2./ Logic Building, Writing Program Definitions, Solving Errors, Generating Algorithm or steps of solving the program  3./ Rewriting some programs","1.5","2022-01-06 08:54:29","2022-01-06 08:59:59","2022-01-07 04:47:59","__export__.res_users_604"
"__export__.project_task_work_527458","__export__.project_task_70978","__export__.project_task_work_summary_type_68","Employment Induction Feedback Survey","0.25","2022-01-06 04:52:42","2022-01-07 04:56:15","2022-01-07 04:56:15","__export__.res_users_604"
"__export__.project_task_work_527448","__export__.project_task_70978","__export__.project_task_work_summary_type_39","Listed and Described the Task that i have completed","0.5","2022-01-06 04:47:04","2022-01-07 04:47:59","2022-01-07 04:47:59","__export__.res_users_604"
"__export__.project_task_work_527447","__export__.project_task_70974","__export__.project_task_work_summary_type_39","Listed and Described the Task That I have completed","0.5","2022-01-05 04:38:34","2022-01-07 04:40:23","2022-01-07 04:40:23","__export__.res_users_604"
"__export__.project_task_work_527446","__export__.project_task_70974","__export__.project_task_work_summary_type_30","1./ Meeting with Project Manager  2./ Python Understanding(Python Variables, Python Data Types, Python Strings, (count, endswith, find, format, index, isspace, lstrip, replace, rfind, rindex, rstrip, zfill, strip, join), Python List, Python Dictionaries, Copying dictionary, Merge dictionaries, Iterating through dictionaries, Fetch value from dictionary, Python Tuples, Python Set, Python Functions, How to define a functions, Call one function from another, Learn how to return value from one function, Python Lambda, Python Built-in Functions, map, Python Class/Objects, Python Inheritance, Python Dates, Find no of Days between two dates, Find Day of the date, Find month of the date, Find year of the date, Convert string to date, Subtract n no of days from a date and find that date, Add year to a date Find date of next Tuesday or Wednesday, Add month to a date, Find no of months between two dates, Find no of years between two dates, Python String Format) are covered Python Understanding Task and it is completed.  3./  Fatching items from Nested Dictionary and List, Nested List or Tuple inside Dictionary  4./ Multi Level Inheritance Program","7.0","2022-01-05 04:30:35","2022-01-07 04:38:10","2022-01-07 04:38:10","__export__.res_users_604"
"__export__.project_task_work_527444","__export__.project_task_70974","__export__.project_task_work_summary_type_30","GitHub SSH Key Generating, Adding Generated SSH Key to GitHub, Generated GitHub Token","1.0","2022-01-04 04:35:47","2022-01-07 04:38:10","2022-01-07 04:38:10","__export__.res_users_604"
"__export__.project_task_work_527445","__export__.project_task_70974","__export__.project_task_work_summary_type_39","Listed and Described the tasks that i have completed, Learned functionality of the Task, Projects and Work entry in ERP","1.0","2022-01-04 04:31:56","2022-01-07 04:38:10","2022-01-07 04:38:10","__export__.res_users_604"
"__export__.project_task_work_527439","__export__.project_task_70974","__export__.project_task_work_summary_type_30","1./ Meeting with Project Manager  2./ GitHub Repository (python_learning) & Video, PyCharm Configuration & Video, Task Video,  3./ Python Understanding(Python Variables, Python Data Types, Python Strings, (count, endswith, find, format, index, isspace, lstrip, replace, rfind, rindex, rstrip, zfill, strip, join), Python List, Python Dictionaries, Copying dictionary, Merge dictionaries, Iterating through dictionaries, Fetch value from dictionary, Python Tuples, Python Set, Python Functions, How to define a functions, Call one function from another, Learn how to return value from one function, Python Lambda, Python Built-in Functions, Python Class Object, Python Inheritance)","6.0","2022-01-04 04:28:21","2022-01-07 04:29:12","2022-01-07 04:29:12","__export__.res_users_604"
"__export__.project_task_work_526191","__export__.project_task_70955","__export__.project_task_work_summary_type_46","Meeting: On Boarding || Reviewing ERP","2.0","2022-01-03 13:30:00","2022-01-03 13:41:53","2022-01-03 13:41:53","__export__.res_users_604"
"__export__.project_task_work_526184","__export__.project_task_70954","__export__.project_task_work_summary_type_46","Meeting: On Boarding || ERP Review","8.0","2022-01-03 11:30:00","2022-01-03 13:41:10","2022-01-03 13:41:10","__export__.res_users_604"
